"""

#COMEBACKTO: Iterating over directions
	
    cheapest path
    
   [[3,   4, 5],
    [0,   1, 4],
    [100, 2, 0]]

""

DFS

cheapest_path = ###

3, 0, 100, 2, 1, 4, 0

[X, O, O]
[X, X, X]
[X, X, X]

w = width
h = height
w * h = n

#options^farthest
the average value in (n + n-1 + n-2 ... + 1) 
    (6 + 5 + 4 + 3 + 2 + 1) = (3.5 + 3.5 + 3.5 + 3.5 + 3.5 + 3.5)
    
O( n + n-1 + n-2 .... + 1) = (n*(n))/2

Runtime = O(n^2/2)
"""


########################################################################

def get_surroundings(track_matrix, x, y, direction):
  #Check top, left, right, bottom
  #[new_x, new_y]
  
def check_surroundings(matrix, track_matrix, x, y, end_x, end_y):
  
  if x
  
  top = get_surroundings(track_matrix, x, y, 1)
  if top != [-1, -1] : #Top
    matrix[top[0], top[1]] = 'X'
    check_surroundings(matrix, top[0], top[1], end_x, end_y)
    
  right = get_surroundings(track_matrix, x, y, 2)
  if right != [-1, -1] : #Top
    matrix[right[0], right[1]] = 'X'
    check_surroundings(matrix, right[0], right[1], end_x, end_y)
  
  #Bottom
  
  #Left
def create_matrix(matrix):
    
	start_x, start_y = [0, 0]
    end_x, end_y = [len(matrix)-1, len(matrix[0])-1]
    
    
    #zeros  = [0] * 10 * 5 #
    #track_matrix = [None] * len(matrix[0]) * len(matrix)
    track_matrix = matrix.copy()
    
    check_surroundings(matrix, track_matrix, start_x, start_y, end_x, end_y)
  	
  """
      
   [[3,   4, 5],
    [0,   1, 4],
    [100, 2, 0]]
  """
  
def cheapest_path(matrix, r=0, c=0, cost_memo={}):
  
  if (r,c) in cost_memo: return cost_memo[(r,c)]
  
  current_cheapest = float(inf)
  
  if r = len(matrix) and c = len(matrix):
    return matrix[r][c]
  
  directions = [(1,0), (-1,0), (0,1), (0,-1)]
  for direction in directions:
    next_r = r + direction[0]
    next_c = c + direction[1]
    
    current_cost = matrix[r][c] + cheapest_path(matrix, next_r, next_c, cost_memo)
    
    if current_cost < current_cheapest: current_cheapest = current_cost
      
  cost_memo[(r, c)] = current_cheapest
  return current_cheapest
  
if __name__ == "__main__":
 	mat_the_matrix =  [[3,  4, 5],
    				[0,   1, 4],
    				[100, 2, 0]]

    print(cheapestPath(mat_the_matrix))
  
  